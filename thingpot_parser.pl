#!/usr/bin/perl -w

##############################################################################
## Description: It reads JSON events, parses using hashes and generates stats
##              Input format based on JSON log generated by ThingPot
##              https://gitlab.com/cosmic-chapter-thp/thingpot
## Author     : Javier S.A.
## Date       : July 2017
##############################################################################


##############################################################################
# Modules
use strict;
use warnings;
use JSON::Parse  qw(parse_json);
use Log::Log4perl qw(:easy);


##############################################################################
# Configuration variables
my $logfile     = "./parse.log";
my $stats_api   = "./stats-api.txt";
my $stats_proxy = "./stats-proxy.txt";


##############################################################################
# Modules configuration and Initialization of Logger
Log::Log4perl->easy_init( { level    => $INFO,
                            file     => ">>$logfile",
                            layout   => '%d %F{1}-%L-%M: [%p] %m%n' },
                          { level    => $INFO,
                            file     => "STDOUT",
                            layout   => '%d [%p] %m%n' },
                        );
my $logger = Log::Log4perl->get_logger();


##############################################################################
## Description: Reads JSON events, store the into hashes and generate stats 
##############################################################################
sub getJsonEvents
{
    my $file = shift;
    $logger->info("Reading content of EVE Json file ($file)");
    if ( open(FH_JSONFILE,$file) )
    {
        # Since decoders reach 'out of memory' when processing huge json 
        # files, then the parsing is done by line and stored into a hash
        my %datahash;
        my $cnt = 1;
        while ( <FH_JSONFILE>)
        {
            my $jsonhash = parse_json ($_); 
            foreach my $key (keys%$jsonhash)
            {
                $datahash{"Event-$cnt"}{$key} = $jsonhash->{$key};
            }
            $cnt++;
        }
        $cnt--;
        $logger->info("|-- ($cnt) events processed from JSON file ($file)");
        close(FH_JSONFILE);
        return \%datahash;
    }
    else {
        $logger->error("Unable to read JSON file ($file)");
    }
}


##############################################################################
## Description: Process JSON data from HASH
##############################################################################
sub processDataApi {
    my ($data, $topfields) = @_;
    my %counter;
    foreach my $evt (keys %{$data}) {
        $logger->debug("Parsing ($evt)");
        foreach my $field1 (keys % {$data->{$evt}}) {
            if ( $field1 eq "url") {
                if ( checkApiUrl($data->{$evt}{$field1}) == 1 ) {                
                    $counter{"URLs_API"}{"TOTAL_URLS_API"}++;
                    $counter{"URLs_API"}{$data->{$evt}{$field1}} ++;
                    if ( $data->{$evt}{$field1} =~ m/^(\/api)\/([^\/]+)\/([^\/]+)/ ) {
                        my $f1 = $1;
                        my $f2 = $2;
                        my $f3 = $3;
                        if ($f2 =~ m/hue/ || $f2 =~ m/devices/ || $f2 =~ m/index/  ) {
                            $counter{"URLs_API_Targeted"}{"$f1/$f2"}++;
                        }
                        else {
                            $counter{"URLs_API_Targeted"}{"$f1/$f2/$f3"}++;
                        }
                    }                    
                }
                else {
                    $counter{"URLs_Others"}{"TOTAL_URLS_OTHERS"}++;
                    $counter{"URLs_Others"}{$data->{$evt}{$field1}} ++;
                }
            }
            elsif ( $field1 eq "type") {
                $counter{"HTTP_TYPES"}{$data->{$evt}{$field1}} ++;
            }
            elsif ( $field1 eq "header" ) {
                foreach my $field2 (keys %{$data->{$evt}{$field1}}) {
                    if ( $field2 eq "REFERER" ) {
                        $counter{"REFERERS"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                    elsif ( $field2 eq "USER_AGENT" ) {
                        $counter{"USER_AGENT"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                    elsif ( $field2 eq "X_REAL_IP" ) {
                        $counter{"REMOTE_IPs"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                }
            }
        }
    }
    $logger->info("Parsing done!");
    return \%counter;
}

##############################################################################
## Description: Show summary of event counts
##############################################################################
sub storeSummary {
    my ($counter, $outfile) = @_;
    $logger->info("Creating output file ($outfile)");
    foreach my $class (keys %{$counter}) {
        if (open (OUTFILE, ">$outfile.$class")) {
            print OUTFILE "####################################\n";
            print OUTFILE "#########  S U M M A R Y  ##########\n";
            print OUTFILE "####################################\n\n";
            foreach my $val (sort{$counter->{$class}{$b}<=>$counter->{$class}{$a}} 
                    keys %{$counter->{$class}} ) {
                printf OUTFILE ("%s & %s \\\\ \n",$counter->{$class}{$val}, $val);
            }        
        }
        else {
            $logger->warn("Unable to write STAT log file ($outfile.$class)");
        }
    }
    close(OUTFILE);
}


##############################################################################
## Description: checks whether the URL is part of the API
##############################################################################
sub checkApiUrl {
    my $url = shift;
    if ( $url =~ m/hue[\s\S]{0,40}$/  || $url =~ m/Philips[\s\S]{0,40}$/ ||
         $url =~ m/^api\//            || $url =~ m/^\/api\//             || 
         $url =~ m/^\/api$/ ) { 
        return 1;
    }
    else {
        return 0;
    }    
}


##############################################################################
## Description: Show summary of event counts (JSON)
##############################################################################
sub processApiLog {
    my $file_json    = shift;
    my $hash_data    = getJsonEvents($file_json);
    my $hash_counter = processDataApi($hash_data);
    storeSummary($hash_counter, $stats_api);
}


##############################################################################
## Description: Show summary of event counts (JSON)
##############################################################################
sub processProxyLog {
    my $file_proxy   = shift;
    my $hash_counter = processDataProxy($file_proxy);
    storeSummary($hash_counter, $stats_proxy);
}

##############################################################################
## Description: Process PROXY LOG
##############################################################################
sub processDataProxy {
    my $logfile = shift;
    my %counters ;
    my $cnt     = 0;
    if (open (PROXYLOG, "<$logfile")) {
        $logger->info("Reading content of PROXY file ($logfile)");
        while (<PROXYLOG>) {
            $cnt++;
            my $line = $_;
               $line =~ m/([^ ]*) ([^ ]+) ([^ ]+) (\[[^\]]+\]) (\"[^\"]*\") ([0-9]*) ([0-9]*) (\"[^\"]*\") (\"[^\"]*\")/;
            my $ip          = $1;
            my $request     = $5;
            my $status_code = $6;
            my $user_agent  = $9;
            $logger->debug("------>");
            $logger->debug("\tIP          : $ip");
            $logger->debug("\tREQUEST     : $request");
            $logger->debug("\tSTATUS CODE : $status_code");
            $logger->debug("\tUSER_AGENT  : $user_agent");
            if ($request =~ m/^\"(POST) ([^ ]*)/ ||
                $request =~ m/^\"(GET) ([^ ]*)/  || 
                $request =~ m/^\"(HEAD) ([^ ]*)/ ||
                $request =~ m/^\"(PUT) ([^ ]*)/   ) {
                $counters{HTTP_REQUEST}{$1}++;
                $counters{HTTP_URL}{$2}++;
                $counters{HTTP_SOURCE_IP}{$ip}++;
                $counters{HTTP_STATUS}{$status_code}++;
                $counters{HTTP_USER_AGENT}{$user_agent}++;
                if ( checkApiUrl($2) == 1 ) {                
                    $counters{"HTTP_URLs_API"}{"TOTAL_URLS_API"}++;
                    $counters{"HTTP_URLs_API"}{$2}++;
                    $counters{"HTTP_URLs_API_USER_AGENT"}{$user_agent}++;
                }
                else {
                    $counters{"HTTP_URLs_Others"}{"TOTAL_URLS_OTHERS"}++;
                    $counters{"HTTP_URLs_Others"}{$2}++;
                    $counters{"HTTP_URLs_Others_USER_AGENT"}{$user_agent}++;
                }
            }
            else {
                $counters{NOHTTP_SOURCE_IP}{$ip}++;
                $counters{NOHTTP_REQUEST}{$request}++;
                $counters{NOHTTP_USER_AGENT}{$user_agent}++;
                $counters{NOHTTP_STATUS}{$status_code}++;
            }
            $counters{ALL_SOURCE_IP}{$ip}++;
            $counters{ALL_REQUEST}{$request}++;
            $counters{ALL_USER_AGENT}{$user_agent}++;
            $counters{ALL_STATUS}{$status_code}++;
        }
        $logger->info("|-- ($cnt) events processed from PROXY file ($logfile)");
        return \%counters;
    }
    else {
        $logger->fatal("Unable to read PROXY LOG file ($logfile)");
        exit(-1);
    }
}

##############################################################################
## Main block
##############################################################################

if ($ARGV[0] eq "api") {
    unless (defined $ARGV[1]) {
        $logger->fatal("Undefined input JSON file ");
        exit(-1);
    }
    processApiLog($ARGV[1]);
}
elsif ($ARGV[0] eq "proxy") {
    unless (defined $ARGV[1]) {
        $logger->fatal("Undefined input PROXY file ");
        exit(-1);
    }
    processProxyLog($ARGV[1]);
}
else {
    $logger->error("Invalid logfile option: ($ARGV[0])");
    $logger->error("Syntax:");
    $logger->error("\t./thingpot_parser.pl proxy|api proxylogFILE|apiJsonFILE");
}
