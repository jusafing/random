#!/usr/bin/perl -w

##############################################################################
## Description: It reads JSON events, parses using hashes and generates stats
##              Input format based on JSON log generated by ThingPot
##              https://gitlab.com/cosmic-chapter-thp/thingpot
## Author     : Javier S.A.
## Date       : July 2017
##############################################################################


##############################################################################
# Modules
use strict;
use warnings;
use JSON::Parse  qw(parse_json);
use Log::Log4perl qw(:easy);


##############################################################################
# Configuration variables
my $logfile  = "./parse.log";
my $statfile = "./parse-stats.txt";

##############################################################################
# Modules configuration and Initialization of Logger
Log::Log4perl->easy_init( { level    => $DEBUG,
                            file     => ">>$logfile",
                            layout   => '%d %F{1}-%L-%M: [%p] %m%n' },
                          { level    => $DEBUG,
                            file     => "STDOUT",
                            layout   => '%d %F{1}-%L-%M: [%p] %m%n' },
                        );
my $logger = Log::Log4perl->get_logger();

##############################################################################
## Description: Reads JSON events, store the into hashes and generate stats 
##############################################################################
sub getJsonEvents
{
    my $file = shift;

    unless (defined $file) {
        $logger->fatal("Undefined input JSON file");
        exit(-1);
    }
    $logger->info("Reading content of EVE Json file ($file)");
    if ( open(FH_JSONFILE,$file) )
    {
        # Since decoders reach 'out of memory' when processing huge json 
        # files, then the parsing is done by line and stored into a hash
        my %datahash;
        my $cnt = 1;
        while ( <FH_JSONFILE>)
        {
            my $jsonhash = parse_json ($_); 
            foreach my $key (keys%$jsonhash)
            {
                $datahash{"Event-$cnt"}{$key} = $jsonhash->{$key};
            }
            $cnt++;
        }
        $cnt--;
        $logger->info("|-- ($cnt) events processed from JSON file ($file)");
        close(FH_JSONFILE);
        return \%datahash;
    }
    else {
        $logger->error("Unable to read JSON file ($file)");
    }
}


##############################################################################
## Description: Process JSON data from HASH
##############################################################################
sub processData {
    my ($data, $topfields) = @_;
    my %counter;
    foreach my $evt (keys %{$data}) {
        $logger->info("Parsing ($evt)");
        foreach my $field1 (keys % {$data->{$evt}}) {
            if ( $field1 eq "url") {
                $counter{"URLs"}{$data->{$evt}{$field1}} ++;
            }
            elsif ( $field1 eq "type") {
                $counter{"HTTP_TYPES"}{$data->{$evt}{$field1}} ++;
            }
            elsif ( $field1 eq "header" ) {
                foreach my $field2 (keys %{$data->{$evt}{$field1}}) {
                    if ( $field2 eq "REFERER" ) {
                        $counter{"REFERERS"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                    elsif ( $field2 eq "USER_AGENT" ) {
                        $counter{"USER_AGENT"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                    elsif ( $field2 eq "X_REAL_IP" ) {
                        $counter{"REMOTE_IPs"}{$data->{$evt}{$field1}{$field2}}++;
                    }
                }
            }
        }
    }
    $logger->info("Parsing done!");
    return \%counter;
}


##############################################################################
## Description: Show summary of event counts
##############################################################################
sub storeSummary {
    my ($counter, $statfile) = @_;
    if (open (OUTFILE, ">$statfile")) {
        print OUTFILE "####################################\n";
        print OUTFILE "#########  S U M M A R Y  ##########\n";
        print OUTFILE "####################################\n\n";
        foreach my $class (keys %{$counter}) {
            print OUTFILE "\n>> $class \n";
            foreach my $val (sort{$counter->{$class}{$b}<=>$counter->{$class}{$a}} 
                    keys %{$counter->{$class}} ) {
                print OUTFILE "\t $counter->{$class}{$val} : $val\n";
            }        
        }
        close(OUTFILE);
    }
    else {
        $logger->warn("Unable to write STAT log file ($statfile)");
    }
}


##############################################################################
## Main block
##############################################################################
my $file_json    = $ARGV[0];
my $hash_data    = getJsonEvents($file_json);
my $hash_counter = processData($hash_data);
storeSummary($hash_counter, $statfile);
